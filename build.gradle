buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle-experimental:0.6.0"
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.model.library'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = '22.0.1'

        defaultConfig.with {
            minSdkVersion.apiLevel = 9
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }
    }
    android.buildTypes {
        /*
        debug {
            ndk.with {
                debuggable = true
            }
        }
        */
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.pro'))
        }
    }
    android.ndk {
        moduleName = "exvoice"
        CFlags.addAll(["-I${file("mruby/include")}".toString(), "-std=c99"])
        ldLibs.addAll(["android", "log", "mruby"])

        abiFilters.addAll(["armeabi", "armeabi-v7a", "arm64-v8a", "x86"])
        ldFlags.add("-Lmruby/build/android-armeabi/lib".toString())
        ldFlags.add("-Lmruby/build/android-armeabi-v7a/lib".toString())
        ldFlags.add("-Lmruby/build/android-arm64/lib".toString())
        ldFlags.add("-Lmruby/build/android-x86/lib".toString())
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

ext {
    mrubyDir = 'mruby'
    buildHost = 'linux' // or msys
    if (System.getProperty('os.name').toLowerCase().startsWith("windows")) {
        ndkDir = System.getenv('ANDROID_NDK_HOME').replaceFirst('^([a-zA-Z]):', '/$1').replace("\\", "/")
    } else {
        ndkDir = System.getenv('ANDROID_NDK_HOME')
    }
}

task mrubyBuild(type: Exec) {
    workingDir mrubyDir
    switch (buildHost) {
        case 'msys':
            environment 'ANDROID_NDK_HOME', ndkDir
            commandLine 'C:/msys64/usr/bin/bash', '-c', 'export PATH="/usr/local/bin:/usr/bin"; rake -v'
            break
        default:
            commandLine 'bash', '-lc', 'rake -v'
            break
    }
}

task mrubyClean(type: Exec) {
    workingDir mrubyDir
    switch (buildHost) {
        case 'msys':
            environment 'ANDROID_NDK_HOME', ndkDir
            commandLine 'C:/msys64/usr/bin/bash', '-c', 'export PATH="/usr/local/bin:/usr/bin"; rake clean'
            break
        default:
            commandLine 'bash', '-lc', 'rake clean'
            break
    }
}

task mrubyDeepClean(type: Exec) {
    workingDir mrubyDir
    switch (buildHost) {
        case 'msys':
            environment 'ANDROID_NDK_HOME', ndkDir
            commandLine 'C:/msys64/usr/bin/bash', '-c', 'export PATH="/usr/local/bin:/usr/bin"; rake deep_clean'
            break
        default:
            commandLine 'bash', '-lc', 'rake deep_clean'
            break
    }
}

tasks.whenObjectAdded { task ->
    if (task.name.startsWith("compileExvoice")) {
        task.dependsOn mrubyBuild
    }
}

clean.dependsOn mrubyClean